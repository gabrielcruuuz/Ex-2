trigger:
  branches:
    include:
      - main  # Substitua pelo nome do seu branch principal

pool:
  vmImage: 'windows-latest'  # Escolha a imagem do sistema operacional desejada

variables:
  solution: '**/*.sln'  # Caminho para o arquivo de solução .NET
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: 'BuildJob'
    displayName: 'Build'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.x'  # Versão do SDK .NET a ser utilizada
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Test/*.csproj'
        arguments: '--configuration Release --collect "Code coverage"'
        

# - stage: Deploy
#   displayName: 'Deployment Stage'
#   dependsOn: Build
#   jobs:
#   - job: 'DeployJob'
#     displayName: 'Deploy to Azure App Service'
#     steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: 'drop'
#         downloadPath: '$(Build.ArtifactStagingDirectory)'

#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         azureSubscription: 'Pago pelo Uso(c003d420-89ca-42f5-91aa-69ed530214fd)'  # Substitua pelo nome da sua assinatura no Azure
#         appType: 'webApp'
#         WebAppName: 'ListaContatos-api'  # Substitua pelo nome do seu App Service no Azure
#         packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'  # Caminho para o artefato ZIP gerado durante o build